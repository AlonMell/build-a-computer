/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Or(a=false, b=instruction[15], out=CInst);
    Not(in=CInst, out=AInst);

    And(a=CInst, b=instruction[5], out=ALUToA);
	Mux16(a=instruction, b=outALU, sel=ALUToA, out=AReg);

    Or(a=AInst, b=ALUToA, out=ALoad);
    ARegister(in=AReg, load=ALoad, out=ARegOut);

    Mux16(a=ARegOut, b=inM, sel=instruction[12], out=AMuxM);

    And(a=instruction[4], b=CInst, out=DLoad);
    DRegister(in=outALU, load=DLoad, out=DOut);

    ALU(
    x=DOut, y=AMuxM, 
    zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], 
    out=outALU, out=outM, 
    zr=zrOut, ng=ngOut);

    And(a=CInst, b=instruction[3], out=writeM);
    Or16(a=false, b=ARegOut, out[0..14]=addressM);

    And(a=zrOut, b=instruction[1], out=jeq);
    And(a=ngOut, b=instruction[2], out=jlt);
    Or(a=zrOut, b=ngOut, out=zrOrng);
    Not(in=zrOrng, out=pos);          
    And(a=pos, b=instruction[0], out=jgt);
    Or(a=jeq, b=jlt, out=jle);
    Or(a=jle, b=jgt, out=jmpA);
    And(a=CInst, b=jmpA, out=loadPC);

    PC(in=ARegOut, load=loadPC, inc=true, reset=reset, out[0..14]=pc);
}